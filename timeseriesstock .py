# -*- coding: utf-8 -*-
"""TIME SERIES_STOCK.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10kXrjHxOk5C4NaOfjzmPAAZFMbKcJofG
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from statsmodels.tsa.seasonal import seasonal_decompose
from statsmodels.tsa.statespace.sarimax import SARIMAX
import yfinance as yf
import os

# Define the companies and the period
companies = ['AAPL', 'AMZN', 'GOOGL', 'META', 'NFLX', 'MSFT']
start_date = '2024-07-30'
end_date = '2024-12-31'  # Extend end date to include December

# Download stock data and forecast for each company
forecast_steps = 62  # Forecasting for 62 days (from Dec 1 to Jan 31)

for company in companies:
    # Download stock data
    stock = yf.Ticker(company)
    stock_data = stock.history(start=start_date, end=end_date)

    # Prepare the data
    stock_data = stock_data[['Close']].copy()
    stock_data.columns = ['Stock Price']

    # Save to CSV
    csv_file_path = f'/content/{company}_stock_data_q3_q4_2024.csv'
    stock_data.to_csv(csv_file_path, index=True)

    print(f"Stock data for {company} has been exported to {csv_file_path}")

    # Decomposing the time series
    result = seasonal_decompose(stock_data['Stock Price'], model='additive', period=30)
    result.plot()
    plt.show()

    # Checking for stationarity
    from statsmodels.tsa.stattools import adfuller

    result = adfuller(stock_data['Stock Price'])
    print(f'{company} - ADF Statistic: %f' % result[0])
    print(f'{company} - p-value: %f' % result[1])

    # If non-stationary, perform differencing
    if result[1] > 0.05:
        stock_data['Stock Price'] = stock_data['Stock Price'].diff().dropna()
        # No further decomposition on differenced data

    # Forecasting using SARIMA
    model = SARIMAX(stock_data['Stock Price'], order=(5, 1, 0), seasonal_order=(1, 1, 1, 12))
    model_fit = model.fit(disp=False)
    print(model_fit.summary())

    # Making future predictions
    forecast = model_fit.get_forecast(steps=forecast_steps)

    # Extract the forecast mean and confidence intervals
    forecast_mean = forecast.predicted_mean
    forecast_conf_int = forecast.conf_int()
    forecast_index = pd.date_range(start='2024-12-01', periods=forecast_steps, freq='D')

    # Plotting the forecast along with actual data
    plt.figure(figsize=(12, 8))
    plt.plot(stock_data.index, stock_data['Stock Price'], label='Historical')
    plt.plot(forecast_index, forecast_mean, label='Forecast')
    plt.fill_between(forecast_index, forecast_conf_int.iloc[:, 0], forecast_conf_int.iloc[:, 1], color='gray', alpha=0.3)
    plt.axvline(pd.Timestamp('2024-12-01'), color='red', linestyle='--', label='Start of Forecast')
    plt.title(f'{company} Stock Price Forecast for December and January')
    plt.xlabel('Date')
    plt.ylabel('Stock Price')
    plt.legend()
    plt.show()
